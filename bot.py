import discord
from discord.ext import commands
from discord.ui import View, Button, Modal, TextInput
import asyncio
import os
from discord.ui import Select
from keep_alive import keep_alive # NEW

TOKEN = os.getenv("DISCORD_BOT_TOKEN") or "YOUR_BOT_TOKEN"

keep_alive() # NEW

GUILD_ID = 1355204242595516841
CATEGORY_ID = 1355204243191238851
TEMP_CHANNEL_ID = 1355208133709926643
CONTROL_CHANNEL_ID = 1357392366599802971

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
temp_channels = {}
channel_limits = {}
message_control_map = {}

# –ò–Ω—Ç–µ–Ω—Ç—ã
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.voice_states = True
bot = commands.Bot(command_prefix="!", intents=intents)

async def get_blocked_role(guild: discord.Guild):
    role = discord.utils.get(guild.roles, name="Blocked")
    if not role:
        role = await guild.create_role(name="Blocked", permissions=discord.Permissions(connect=False))
    return role

class VoiceChannelCheck:
    @staticmethod
    async def check_user_in_channel(interaction, channel):
        vs = interaction.user.voice
        if not vs or vs.channel is None or vs.channel.id != channel.id:
            await interaction.response.send_message("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)
            return False
        return True

class NicknameInputModal(Modal):
    def __init__(self, action, voice_channel, user):
        super().__init__(title=action)
        self.voice_channel = voice_channel
        self.action = action
        self.user = user
        self.add_item(TextInput(label="–ù–∏–∫–Ω–µ–π–º", placeholder="Username#0000 –∏–ª–∏ –∏–º—è", required=True, max_length=32))

    async def on_submit(self, interaction):
        if not await VoiceChannelCheck.check_user_in_channel(interaction, self.voice_channel):
            return
        query = self.children[0].value.lower()
        source = interaction.guild.members if self.action == "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" else self.voice_channel.members
        target = discord.utils.find(lambda m: m.name.lower()==query or m.display_name.lower()==query, source)
        if not target:
            await interaction.response.send_message("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return
        if self.action == "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
            role = await get_blocked_role(interaction.guild)
            await target.add_roles(role)
            await self.voice_channel.set_permissions(target, connect=False)
            await asyncio.sleep(1)
            try: await target.move_to(None)
            except: pass
            await interaction.response.send_message(f"üîí {target.mention}", ephemeral=True)
        elif self.action == "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
            role = await get_blocked_role(interaction.guild)
            await target.remove_roles(role)
            await self.voice_channel.set_permissions(target, overwrite=None)
            await interaction.response.send_message(f"üîì {target.mention}", ephemeral=True)
        elif self.action == "–ö–∏–∫–Ω—É—Ç—å":
            try: await target.move_to(None); await interaction.response.send_message(f"‚öîÔ∏è {target.mention}", ephemeral=True)
            except: await interaction.response.send_message("‚ùå", ephemeral=True)
        elif self.action == "–ü–µ—Ä–µ–¥–∞—Ç—å":
            try:
                await self.voice_channel.set_permissions(self.user, overwrite=None)
                await self.voice_channel.set_permissions(target, connect=True, manage_channels=True)
                panel = message_control_map.get(self.voice_channel.id)
                if panel and isinstance(panel.view, VoiceControlPanel):
                    panel.view.creator = target
                await interaction.response.send_message(f"üëë –¢–µ–ø–µ—Ä—å {target.mention} ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞.", ephemeral=True)
            except Exception as e:
                await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

class VoiceControlPanel(View):
    def __init__(self, channel, control_message_id=None, creator=None):
        super().__init__(timeout=None)
        self.channel = channel
        self.control_message_id = control_message_id
        self.is_locked = False
        self.is_hidden = False
        self.creator = creator

    async def interaction_check(self, interaction):
        if interaction.user != self.creator:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º.", ephemeral=True)
            return False
        return await VoiceChannelCheck.check_user_in_channel(interaction, self.channel)

    @discord.ui.button(label="üîí", style=discord.ButtonStyle.gray)
    async def toggle_lock(self, interaction, button: Button):
        if not self.is_locked:
            await self.channel.set_permissions(interaction.guild.default_role, connect=False)
            button.label = "üîì"
            self.is_locked = True
        else:
            await self.channel.set_permissions(interaction.guild.default_role, connect=True)
            button.label = "üîí"
            self.is_locked = False
        await interaction.response.edit_message(view=self)

    @discord.ui.button(label="üëª", style=discord.ButtonStyle.gray)
    async def toggle_hide(self, interaction, button: Button):
        if not self.is_hidden:
            await self.channel.set_permissions(interaction.guild.default_role, view_channel=False)
            button.label = "üëÄ"
            self.is_hidden = True
        else:
            await self.channel.set_permissions(interaction.guild.default_role, view_channel=True)
            button.label = "üëª"
            self.is_hidden = False
        await interaction.response.edit_message(view=self)

    @discord.ui.button(label="üîá", style=discord.ButtonStyle.gray)
    async def mute_all(self, interaction, button):
        for m in self.channel.members: await m.edit(mute=True)
        await interaction.response.send_message("üîá", ephemeral=True)

    @discord.ui.button(label="üîä", style=discord.ButtonStyle.gray)
    async def unmute_all(self, interaction, button):
        for m in self.channel.members: await m.edit(mute=False)
        await interaction.response.send_message("üîä", ephemeral=True)

    @discord.ui.button(label="üóë", style=discord.ButtonStyle.danger)
    async def delete(self, interaction, button):
        await interaction.response.send_message("üóë", ephemeral=True)
        try:
            if self.control_message_id:
                ctrl_channel = interaction.guild.get_channel(CONTROL_CHANNEL_ID)
                if ctrl_channel:
                    msg = await ctrl_channel.fetch_message(self.control_message_id)
                    await msg.delete()
                message_control_map.pop(self.channel.id, None)
            await self.channel.delete()
        except: pass

    @discord.ui.button(label="‚öôÔ∏è", style=discord.ButtonStyle.blurple)
    async def limit(self, interaction, button):
        class LimitSelect(Select):
            def __init__(self, parent):
                opts = [discord.SelectOption(label=str(i), value=str(i)) for i in range(1,11)]
                super().__init__(placeholder="‚öôÔ∏è", min_values=1, max_values=1, options=opts)
                self.parent = parent
            async def callback(self2, inter):
                await self2.parent.channel.edit(user_limit=int(self2.values[0]))
                await inter.response.send_message("‚öôÔ∏è", ephemeral=True)
        view = View(); view.add_item(LimitSelect(self)); await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", view=view, ephemeral=True)

    @discord.ui.button(label="‚úèÔ∏è", style=discord.ButtonStyle.blurple)
    async def rename(self, interaction, button):
        await interaction.response.send_message("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —á–∞—Ç.", ephemeral=True)
        try:
            msg = await bot.wait_for('message', check=lambda m: m.author==interaction.user and m.channel==interaction.channel, timeout=60)
            if msg.content.strip():
                await self.channel.edit(name=msg.content.strip())
                await interaction.followup.send("‚úÖ –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω.", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", ephemeral=True)
        except asyncio.TimeoutError:
            await interaction.followup.send("‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.", ephemeral=True)

    @discord.ui.button(label="üîÑ", style=discord.ButtonStyle.red)
    async def manage_block(self, interaction, button):
        class ActionSelect(View):
            def __init__(self, channel, user):
                super().__init__(timeout=None)
                self.channel, self.user = channel, user
            @discord.ui.select(placeholder="üîÑ", options=[discord.SelectOption(label="üîí", value="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"), discord.SelectOption(label="üîì", value="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")], min_values=1, max_values=1)
            async def select_callback(self2, inter, menu):
                await inter.response.send_modal(NicknameInputModal(menu.values[0], self2.channel, self2.user))
        view = ActionSelect(self.channel, interaction.user)
        await interaction.response.send_message("", view=view, ephemeral=True)

    @discord.ui.button(label="‚öîÔ∏è", style=discord.ButtonStyle.gray)
    async def kick(self, interaction, button):
        await interaction.response.send_modal(NicknameInputModal("–ö–∏–∫–Ω—É—Ç—å", self.channel, interaction.user))

    @discord.ui.button(label="üëë", style=discord.ButtonStyle.blurple)
    async def transfer(self, interaction, button):
        await interaction.response.send_modal(NicknameInputModal("–ü–µ—Ä–µ–¥–∞—Ç—å", self.channel, interaction.user))

@bot.event
async def on_ready(): print(f"‚úÖ {bot.user.name} –∑–∞–ø—É—â–µ–Ω!")

@bot.event
async def on_voice_state_update(member, before, after):
    if after.channel and after.channel.id == TEMP_CHANNEL_ID:
        guild = bot.get_guild(GUILD_ID); category = guild.get_channel(CATEGORY_ID)
        if category:
            overwrites = {guild.default_role: discord.PermissionOverwrite(connect=True, view_channel=True), member: discord.PermissionOverwrite(connect=True, manage_channels=True)}
            temp = await guild.create_voice_channel(name=f"üîä {member.display_name}", category=category, overwrites=overwrites)
            await member.move_to(temp); temp_channels[temp.id]=temp; channel_limits[temp.id]=10
            ctrl = guild.get_channel(CONTROL_CHANNEL_ID)
            if ctrl:
                embed = discord.Embed(
                    title="üéõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º",
                    description=(
                        "üîí –ó–∞–∫—Ä—ã—Ç—å / –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø    ‚îÉ     üëª –°–∫—Ä—ã—Ç—å / –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª\n"
                        "üîá –ó–∞–≥–ª—É—à–∏—Ç—å –≤—Å–µ—Ö             ‚îÉ     üîä –†–∞–∑–≥–ª—É—à–∏—Ç—å –≤—Å–µ—Ö\n"
                        "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª               ‚îÉ    ‚öôÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                        "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª        ‚îÉ    üîÑ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å / —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
                        "‚öîÔ∏è –ö–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞          ‚îÉ    üëë –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞"
                    ),
                    color=discord.Color.dark_embed()
                )
                msg = await ctrl.send(embed=embed, view=VoiceControlPanel(temp, creator=member))
                message_control_map[temp.id]=msg
    if before.channel and before.channel.id in temp_channels and not before.channel.members:
        try:
            if before.channel.id in message_control_map:
                try:
                    await message_control_map[before.channel.id].delete()
                except: pass
                del message_control_map[before.channel.id]
            await before.channel.delete()
            del temp_channels[before.channel.id]
            del channel_limits[before.channel.id]
        except: pass

bot.run(TOKEN)
